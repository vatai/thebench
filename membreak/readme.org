* MemBread - Breaking the program with memory allocation

Reason/backstory: I had an MPI program breaking when given larger
parameters.  Based on some quick calculations, the parameters were
still very far from what actually will be needed for a real life
application, but the auxiliary data-structures might have eaten up the
memory.

Description: I want to see when and how does a program break, if I
"want too much memory": will it break at allocation, will it break
when reading the memory will it break when writing the memory.

Findings:
- On my t480 laptop with 16GByte of RAM (8GByte of swap) allocation
  fails with ~i == 32~ (works for ~i == 31~).  For ~i == 31~ the size
  become ~1 << (31 + 3)~ which is 16GByte.
- For ~i == 61, 62, 63~ the ~malloc~ succeeds because the size
  calculation overflows: ~sizeof(*buf) == 8 == (1 << 3)~, which means
  when multiplying ~(1 << i) * (1 << 3) == 1 << (i + 3)~.  The actual
  result of the multiplication will overflow if ~i + 3 > 63~, which
  explains the result.  For example for ~i == 62~ the we should
  allocate ~1 << (62 + 3) == 1 << (65) == 1 << 1 == 2~.
- It crashes when running with MPI, with multiple processes on a
  single computer (the allocations are successful, but writing them
  causes the program to trash).
